{"version":3,"sources":["components/Table/Table.module.css","app/GithubApp/Header/Header.module.css","components/Pagination/Pagination.module.css","components/Loader/Loader.module.css","components/Button/Button.module.css","components/Error/Error.module.css","components/TextInput/TextInput.module.css","components/Select/Select.module.css","components/OnlineStatus/OnlineStatus.module.css","gql/client.js","components/Button/Button.js","components/Pagination/Pagination.js","components/Table/Table.js","components/Loader/Loader.js","components/Error/Error.js","gql/query/getListLicenses.js","gql/query/getListRepositories.js","app/GithubApp/RepositoriesTable/utils/utils.js","app/GithubApp/RepositoriesTable/RepositoriesTable.js","components/TextInput/TextInput.js","components/Select/Select.js","app/GithubApp/LicenseSelect/LicenseSelect.js","app/GithubApp/Header/Header.js","app/GithubApp/utils/utils.js","app/GithubApp/GithubApp.js","components/OnlineStatus/OnlineStatus.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","httpLink","createHttpLink","uri","process","authLink","setContext","_","headers","token","authorization","gqlClient","ApolloClient","cache","InMemoryCache","link","concat","Button","children","className","onClick","rest","cn","cm","buttonComponent","defaultProps","Pagination","onPrevClick","onNextClick","isPrevDisabled","isNextDisabled","PaginationWrapper","responsiveButton","data-testid","disabled","Table","columns","data","error","columnKeys","Object","keys","table","thead","tr","map","key","th","tbody","length","empty","item","td","data-label","Loader","loading","loader","loaderText","Error","memo","text","displayName","getListLicenses","gql","getListRepositories","enhancedFetchMore","fetchMore","queryString","cursorBefore","cursorAfter","limit","variables","last","first","notifyOnNetworkStatusChange","updateQuery","prev","fetchMoreResult","RepositoriesTable","useQuery","resultData","useMemo","search","edges","tableData","listItem","node","id","name","stars","stargazers","totalCount","license","licenseInfo","date","createdAt","tableError","paginationParams","pageInfo","isPreviousDisabled","startCursor","endCursor","hasPreviousPage","hasNextPage","getPaginationParams","data-testif","PropTypes","TextInput","onChange","textInput","Select","options","select","value","firstEmptySelectItem","LicenseSelect","licenses","Header","setRepositoryName","setLicense","header","headerItem","headerField","placeholder","e","target","getDateCondition","condition","Date","setDate","year","getFullYear","month","getMonth","day","getDate","getLicenseCondition","getRepositoryNameCondition","repositoryName","getSortCondition","field","sortBy","GithubApp","lang","useState","repositoryNameValue","useDebounce","join","OnlineStatus","onlineStatus","useOnlineStatus","App","isTokenExist","Boolean","updateToken","prompt","localStorage","setItem","window","location","useEffect","style","padding","client","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78251cce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__3cVv6\",\"thead\":\"Table_thead__1OMLY\",\"tr\":\"Table_tr__12T8R\",\"th\":\"Table_th__2sVy3\",\"td\":\"Table_td__aBNTH\",\"tbody\":\"Table_tbody__28b1x\",\"empty\":\"Table_empty__369-5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2wsdt\",\"headerItem\":\"Header_headerItem__1u1Dh\",\"headerField\":\"Header_headerField__25CKP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PaginationWrapper\":\"Pagination_PaginationWrapper__UdflU\",\"responsiveButton\":\"Pagination_responsiveButton__2kd1P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__1j2Bs\",\"loaderText\":\"Loader_loaderText__2-E48\",\"loading\":\"Loader_loading__3Z7Q5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonComponent\":\"Button_buttonComponent__XryM_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Error\":\"Error_Error__3f4kP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textInput\":\"TextInput_textInput__23uMr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"Select_select__3UVD7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"onlineStatus\":\"OnlineStatus_onlineStatus__1k6dl\"};","import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n  uri: process.env.REACT_APP_GITHUB_API_ENDPOINT,\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = process.env.REACT_APP_GITHUB_TOKEN || localStorage.getItem('token');\n\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nexport const gqlClient = new ApolloClient({\n  uri: process.env.REACT_APP_GITHUB_API_ENDPOINT,\n  cache: new InMemoryCache(),\n  link: authLink.concat(httpLink),\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport cm from './Button.module.css';\n\nexport const Button = ({ children, className, onClick, ...rest }) => (\n  <button className={cn(cm.buttonComponent, className)} onClick={onClick} {...rest}>\n    {children}\n  </button>\n);\n\nButton.propTypes = {\n  children: PropTypes.any,\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  onClick: PropTypes.func,\n};\n\nButton.defaultProps = {\n  onClick: () => {},\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from 'components/Button';\n\nimport cm from './Pagination.module.css';\n\nexport const Pagination = ({ onPrevClick, onNextClick, isPrevDisabled, isNextDisabled }) => {\n  return (\n    <div className={cm.PaginationWrapper}>\n      <Button className={cm.responsiveButton} data-testid=\"button-prev\" disabled={isPrevDisabled} onClick={onPrevClick}>\n        {'<'} Prev\n      </Button>\n      <Button className={cm.responsiveButton} data-testid=\"button-next\" disabled={isNextDisabled} onClick={onNextClick}>\n        Next {'>'}\n      </Button>\n    </div>\n  );\n};\n\nPagination.propTypes = {\n  onPrevClick: PropTypes.func.isRequired,\n  onNextClick: PropTypes.func.isRequired,\n  isPrevDisabled: PropTypes.bool,\n  isNextDisabled: PropTypes.bool,\n};\n\nPagination.defaultProps = {\n  isPrevDisabled: true,\n  isNextDisabled: false,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport cm from './Table.module.css';\n\nexport const Table = ({ columns, data, error }) => {\n  const columnKeys = Object.keys(columns);\n\n  return (\n    <div className={cm.table}>\n      <div className={cm.thead}>\n        <div className={cm.tr}>\n          {columnKeys.map((key) => (\n            <div className={cm.th} key={key}>\n              {columns[key]}\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className={cm.tbody}>\n        {error ? error : null}\n        {!error && (!data || (data && !data.length)) && <div className={cm.empty}>No data</div>}\n        {data.map((item) => (\n          <div className={cm.tr} key={item.key}>\n            {columnKeys.map((key) => (\n              <div className={cm.td} key={key} data-label={columns[key]}>\n                {item[key] || '---'}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nTable.propTypes = {\n  columns: PropTypes.object,\n  data: PropTypes.array,\n  error: PropTypes.any,\n};\n\nTable.defaultProps = {\n  columns: {},\n  data: [],\n  error: false,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport cn from 'classnames';\nimport cm from './Loader.module.css';\n\nexport const Loader = ({ children, loading, className, ...rest }) => (\n  <div className={cm.loader} {...rest}>\n    <div className={cn({ [cm.loaderText]: true, [cm.loading]: loading }, className)}>Loading data ...</div>\n    {children}\n  </div>\n);\n\nLoader.propTypes = {\n  children: PropTypes.any,\n  loading: PropTypes.bool,\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n};\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport cm from './Error.module.css';\n\nexport const Error = memo(({ text }) => {\n  return <div className={cm.Error}>{text}</div>;\n});\n\nError.propTypes = {\n  text: PropTypes.any,\n};\n\nError.defaultProps = {\n  text: 'Error',\n};\n\nError.displayName = 'Error';\n","import { gql } from 'apollo-boost';\n\nexport const getListLicenses = gql`\n  query GetListLicensies {\n    licenses {\n      id\n      name\n      key\n    }\n  }\n`;\n","import { gql } from 'apollo-boost';\n\nexport const getListRepositories = gql`\n  query GetListRepositories($queryString: String!, $cursorAfter: String, $cursorBefore: String, $first: Int, $last: Int) {\n    search(query: $queryString, first: $first, last: $last, after: $cursorAfter, before: $cursorBefore, type: REPOSITORY) {\n      repositoryCount\n      edges {\n        node {\n          ... on Repository {\n            id\n            name\n            stargazers {\n              totalCount\n            }\n            licenseInfo {\n              name\n            }\n            updatedAt\n            createdAt\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n`;\n","export const enhancedFetchMore = ({ fetchMore, queryString, cursorBefore, cursorAfter, limit }) => {\n  return fetchMore({\n    variables: {\n      queryString: queryString,\n      cursorBefore: cursorBefore,\n      cursorAfter: cursorAfter,\n      last: cursorBefore ? limit || 10 : null,\n      first: cursorAfter ? limit || 10 : null,\n    },\n    notifyOnNetworkStatusChange: true,\n    updateQuery: (prev, { fetchMoreResult }) => {\n      if (!fetchMoreResult) return prev;\n\n      return fetchMoreResult;\n    },\n  });\n};\n\nexport const getPaginationParams = (pageInfo) => {\n  let cursorBefore = null;\n  let cursorAfter = null;\n\n  let isPreviousDisabled = true;\n  let isNextDisabled = true;\n\n  if (pageInfo) {\n    cursorBefore = pageInfo && pageInfo.startCursor;\n    cursorAfter = pageInfo && pageInfo.endCursor;\n\n    isPreviousDisabled = pageInfo && !pageInfo.hasPreviousPage;\n    isNextDisabled = pageInfo && !pageInfo.hasNextPage;\n  }\n\n  return {\n    cursorBefore,\n    cursorAfter,\n    isPreviousDisabled,\n    isNextDisabled,\n  };\n};\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Pagination } from 'components/Pagination';\nimport { Table } from 'components/Table';\nimport { Loader } from 'components/Loader';\nimport { Error } from 'components/Error';\n\nimport { useQuery } from '@apollo/client';\nimport { getListRepositories } from 'gql/query';\n\nimport { enhancedFetchMore, getPaginationParams } from './utils';\n\nexport const RepositoriesTable = ({ queryString, limit }) => {\n  const { data, error, loading, fetchMore } = useQuery(getListRepositories, {\n    variables: {\n      queryString: queryString,\n      cursorAfter: null,\n      first: limit,\n    },\n  });\n\n  const resultData = useMemo(() => (data && data.search && data.search.edges) || [], [data]);\n\n  const tableColumns = {\n    name: 'Name',\n    stars: 'Stars',\n    license: 'License',\n    date: 'Date',\n  };\n\n  const tableData = useMemo(\n    () =>\n      resultData.map((listItem) => ({\n        key: listItem.node.id,\n        name: listItem.node.name,\n        stars: listItem.node.stargazers && listItem.node.stargazers.totalCount,\n        license: listItem.node.licenseInfo && listItem.node.licenseInfo.name,\n        date: listItem.node.createdAt,\n      })),\n    [resultData],\n  );\n\n  const tableError = error ? <Error text=\"Repositories list loading error.\" /> : false;\n\n  const pageInfo = data && data.search && data.search.pageInfo;\n  const paginationParams = getPaginationParams(pageInfo);\n\n  return (\n    <Loader loading={loading} data-testif=\"repositories-list-loading\">\n      <Table columns={tableColumns} data={tableData} error={tableError} />\n      <Pagination\n        onPrevClick={() => enhancedFetchMore({ fetchMore, queryString, cursorBefore: paginationParams.cursorBefore, limit })}\n        onNextClick={() => enhancedFetchMore({ fetchMore, queryString, cursorAfter: paginationParams.cursorAfter, limit })}\n        isPrevDisabled={paginationParams.isPreviousDisabled}\n        isNextDisabled={paginationParams.isNextDisabled}\n      />\n    </Loader>\n  );\n};\n\nRepositoriesTable.propTypes = {\n  queryString: PropTypes.string.isRequired,\n  limit: PropTypes.number,\n};\n\nPropTypes.defaultProps = {\n  limit: 10,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport cn from 'classnames';\nimport cm from './TextInput.module.css';\n\nexport const TextInput = ({ className, onChange, ...rest }) => <input className={cn(cm.textInput, className)} onChange={onChange} {...rest} />;\n\nTextInput.propTypes = {\n  onChange: PropTypes.func,\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport cn from 'classnames';\nimport cm from './Select.module.css';\n\nexport const Select = ({ className, onChange, options, ...rest }) => (\n  <select disabled={!options || (options && options.length === 0)} className={cn(cm.select, className)} onChange={onChange} {...rest}>\n    {options &&\n      options.map((item) => (\n        <option key={item.key} value={item.key}>\n          {item.name}\n        </option>\n      ))}\n  </select>\n);\n\nSelect.propTypes = {\n  options: PropTypes.array,\n  onChange: PropTypes.func,\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n};\n\nSelect.defaultProps = {\n  onChange: () => {},\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Select } from 'components/Select';\n\nimport { useQuery } from '@apollo/client';\nimport { getListLicenses } from 'gql/query';\nimport { Loader } from 'components/Loader';\nimport { Error } from 'components/Error';\n\nconst firstEmptySelectItem = [{ key: 0, name: '--- Not Selected ---' }];\n\nexport const LicenseSelect = ({ onChange, ...rest }) => {\n  const { data, loading, error } = useQuery(getListLicenses);\n\n  if (error) {\n    return <Error text=\"Licenses loading error.\" />;\n  }\n\n  const options = data ? firstEmptySelectItem.concat(data.licenses.map((license) => ({ key: license.key, name: license.name }))) : [];\n\n  return (\n    <Loader loading={loading} data-testid=\"licenses-select-loading\">\n      <Select data-testid=\"licenses-select\" options={options} onChange={onChange} {...rest} />\n    </Loader>\n  );\n};\n\nLicenseSelect.propTypes = {\n  onChange: PropTypes.func,\n};\n\nLicenseSelect.defaultProps = {\n  onChange: () => {},\n};\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TextInput } from 'components/TextInput';\nimport { LicenseSelect } from '../LicenseSelect';\n\nimport cm from './Header.module.css';\n\nexport const Header = memo(({ setRepositoryName, setLicense }) => {\n  return (\n    <div className={cm.header}>\n      <div className={cm.headerItem}>\n        <label>Search by repo name </label>\n        <TextInput\n          data-testid=\"search-by-name\"\n          className={cm.headerField}\n          name=\"search\"\n          placeholder=\"Search by repository name\"\n          onChange={(e) => setRepositoryName(e.target.value)}\n        />\n      </div>\n      <div className={cm.headerItem}>\n        <label>License type</label>\n        <LicenseSelect className={cm.headerField} onChange={(e) => setLicense(e.target.value)} />\n      </div>\n    </div>\n  );\n});\n\nHeader.displayName = 'Header';\n\nHeader.propTypes = {\n  setRepositoryName: PropTypes.func.isRequired,\n  setLicense: PropTypes.func.isRequired,\n};\n","export const getDateCondition = (condition = '>=', date = new Date()) => {\n  date.setDate(1);\n\n  const year = date.getFullYear();\n\n  let month = date.getMonth() + 1;\n  month = month > 9 ? month : `0${month}`;\n\n  let day = date.getDate();\n  day = day > 9 ? day : `0${day}`;\n\n  return `created:${condition}${year}-${month}-${day}`;\n};\n\nexport const getLicenseCondition = (license) => {\n  if (!license || +license === 0) {\n    return '';\n  }\n\n  return `license:${license}`;\n};\n\nexport const getRepositoryNameCondition = (repositoryName) => (repositoryName ? `${repositoryName} in:name` : '');\n\nexport const getSortCondition = (field, sortBy = 'desc') => {\n  if (!field) {\n    return '';\n  }\n\n  return `sort:${field}-${sortBy}`;\n};\n\nexport const getLanguageCondition = (lang) => {\n  if (!lang) {\n    return '';\n  }\n\n  return `language:${lang}`;\n};\n","import React, { useState } from 'react';\nimport { useDebounce } from 'use-debounce';\n\nimport { RepositoriesTable } from './RepositoriesTable';\nimport { Header } from './Header';\n\nimport { getDateCondition, getLanguageCondition, getLicenseCondition, getRepositoryNameCondition, getSortCondition } from './utils';\n\nexport const GithubApp = () => {\n  const [license, setLicense] = useState(null);\n\n  const [repositoryNameValue, setRepositoryName] = useState(null);\n  const [repositoryName] = useDebounce(repositoryNameValue, 300);\n\n  const queryString = [\n    getSortCondition('stars', 'desc'),\n    getLanguageCondition('JavaScript'),\n    getDateCondition(),\n    getLicenseCondition(license),\n    getRepositoryNameCondition(repositoryName),\n  ].join(' ');\n\n  return (\n    <>\n      <Header setLicense={setLicense} setRepositoryName={setRepositoryName} />\n      <RepositoriesTable queryString={queryString} limit={10} />\n    </>\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport useOnlineStatus from '@rehooks/online-status';\nimport { Error } from 'components/Error';\n\nimport cm from './OnlineStatus.module.css';\n\nexport const OnlineStatus = ({ children }) => {\n  const onlineStatus = useOnlineStatus();\n\n  return (\n    <>\n      {!onlineStatus && (\n        <div className={cm.onlineStatus}>\n          <Error text=\"No network connection. Please reload page or enable network connection.\" />\n        </div>\n      )}\n      {children}\n    </>\n  );\n};\n\nOnlineStatus.propTypes = {\n  children: PropTypes.any,\n};\n","import React, { useEffect } from 'react';\n\nimport { ApolloProvider } from '@apollo/client';\n\nimport { gqlClient } from './gql/client';\nimport { GithubApp } from './app/GithubApp';\n\nimport { OnlineStatus } from 'components/OnlineStatus';\n\nfunction App() {\n  const isTokenExist = Boolean(process.env.REACT_APP_GITHUB_TOKEN || localStorage.getItem('token'));\n\n  const updateToken = () => {\n    const token = prompt('Введите ваш personal-access-token от Github, чтобы начать взаимодействие с API');\n\n    localStorage.setItem('token', token);\n    window.location = '/';\n  };\n\n  useEffect(() => {\n    if (!isTokenExist) {\n      updateToken();\n    }\n  }, [isTokenExist]);\n\n  return (\n    <OnlineStatus>\n      <div style={{ padding: '15px 15px 0' }}>\n        Если вы введете неверный personal-access-token, то получите 401 ошибку, данные не будут загружены.\n        <br />\n        <br />\n        <button onClick={updateToken}>Ввести personal-access-token повторно</button>\n      </div>\n      <ApolloProvider client={gqlClient}>\n        <GithubApp />\n      </ApolloProvider>\n    </OnlineStatus>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'normalize.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}